#!/bin/bash

## Copyright (C) 2012 - 2022 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

#### meta start
#### project Whonix
#### category networking and firewall
#### description
## firewall script
#### meta end

## NOTE: If you make changes to this firewall, think about, if it would
##       make sense to add the changes to Whonix-Gateway script as well.
##       Some things like dropping invalid packages, should be shared.

## TODO:
## - Should allow unlimited TCP/UDP/IPv6 traffic on the virtual external interface (OnionCat / OpenVPN).

## source for some rules:
## http://www.cyberciti.biz/faq/ip6tables-ipv6-firewall-for-linux/

set -e

error_handler() {
  echo "$0 ##################################################"
  echo "$0 ERROR: Whonix firewall script failed!"
  echo "$0 ##################################################"

  exit 1
}

trap "error_handler" ERR

init() {
  output_cmd "OK: Loading Whonix firewall..."

  set -o pipefail
  set -o errtrace
}

source_config_folder() {
  shopt -s nullglob
  local i
  for i in \
    /etc/whonix_firewall.d/*.conf \
    /rw/config/whonix_firewall.d/*.conf \
    /usr/local/etc/whonix_firewall.d/*.conf; do
    bash_n_exit_code="0"
    bash_n_output="$(bash -n "$i" 2>&1)" || {
      bash_n_exit_code="$?"
      true
    }
    if [ ! "$bash_n_exit_code" = "0" ]; then
      output_cmd "ERROR: Invalid config file: $i
   bash_n_exit_code: $bash_n_exit_code
   bash_n_output:
   $bash_n_output" >&2
      exit 1
    fi
    source "$i"
  done
}

variables_defaults() {
  [ -n "$iptables_cmd" ] || iptables_cmd="iptables --wait"
  [ -n "$nftables_cmd" ] || nftables_cmd="nft --wait"

  ## Legacy.
  if [ "$VPN_FIREWALL" = "1" ]; then
    TUNNEL_FIREWALL_ENABLE="true"
  fi

  ## Not in use/defined yet.
  ## INT_IF could be the internal network.
  ## EXT_IF could be an additional virtual network adapter,
  ##        such as OnionCat or OpenVPN.

  ## External interface
  [ -n "$EXT_IF" ] || EXT_IF="eth0"
  ## Internal interface
  [ -n "$INT_IF" ] || INT_IF="eth1"

  if command -v "qubesdb-read" > /dev/null 2>&1; then
    ## Would fail if netvm is set to 'none',
    ## which is the case in Qubes R4 TemplateVMs.
    [ -n "$GATEWAY_IP" ] || GATEWAY_IP="$(qubesdb-read /qubes-gateway 2> /dev/null)" || GATEWAY_IP="127.0.0.1"
  else
    ## IP HARDCODED. If you want to change IP, set variable GATEWAY_IP through a
    ## drop-in configuration snippet in /etc/whonix_firewall.d
    ## configuration folder instead.
    [ -n "$GATEWAY_IP" ] || GATEWAY_IP="10.152.152.10"
  fi

  ## Since hardcoded in anon-ws-disable-stacked-tor.
  ## IP HARDCODED. If you want to change IP, set variable GATEWAY_IP through a
  ## drop-in configuration snippet in /etc/whonix_firewall.d
  ## configuration folder instead.
  [ -n "$GATEWAY_IP_HARDCODED" ] || GATEWAY_IP_HARDCODED="10.152.152.10"

  [ -n "$TUNNEL_USER" ] || TUNNEL_USER="$(id -u tunnel)"
  [ -n "$NOTUNNEL_USER" ] || NOTUNNEL_USER="$(id -u notunnel)"
  [ -n "$UPDATESPROXYCHECK_USER" ] || UPDATESPROXYCHECK_USER="$(id -u updatesproxycheck)"

  [ -n "$SDWDATE_USER" ] || SDWDATE_USER="$(id -u sdwdate)" || true
  [ -n "$SYSTEMCHECK_USER" ] || SYSTEMCHECK_USER="$(id -u systemcheck)" || true

  [ -n "$TUNNEL_FIREWALL_ALLOW_NOTUNNEL_USER" ] || TUNNEL_FIREWALL_ALLOW_NOTUNNEL_USER="true"

  ## Control Port Filter Proxy Port
  [ -n "$CONTROL_PORT_FILTER_PROXY_PORT" ] || CONTROL_PORT_FILTER_PROXY_PORT="9051"

  [ -n "$qubes_updates_proxy_port" ] || qubes_updates_proxy_port="8082"

  [ -n "$VPN_INTERFACE" ] || VPN_INTERFACE="tun0"

  ## Destinations you do not routed through VPN.
  if [ "$LOCAL_NET" = "" ]; then
    if command -v "qubesdb-read" > /dev/null 2>&1; then
      LOCAL_NET="\
            127.0.0.0/24 \
            10.137.0.0/16 \
            10.138.0.0/16 \
         "
    else
      ## 10.0.2.2/24: VirtualBox DHCP
      ## IP HARDCODED unfortunately. Use a /etc/whonix_firewall.d configuration folder drop-in if you want to change it.
      LOCAL_NET="\
            127.0.0.0/24 \
            192.168.0.0/24 \
            192.168.1.0/24 \
            10.152.152.0/24 \
            10.0.2.2/24 \
         "
    fi
  fi

  ## Socks Ports for per application circuits.
  ## SOCKS_PORT_TOR_DEFAULT
  INTERNAL_OPEN_PORTS+=" 9050 "
  ## SOCKS_PORT_TB
  INTERNAL_OPEN_PORTS+=" 9100 "
  ## SOCKS_PORT_IRC
  INTERNAL_OPEN_PORTS+=" 9101 "
  ## SOCKS_PORT_TORBIRDY
  INTERNAL_OPEN_PORTS+=" 9102 "
  ## SOCKS_PORT_IM
  INTERNAL_OPEN_PORTS+=" 9103 "
  ## SOCKS_PORT_APT_GET
  INTERNAL_OPEN_PORTS+=" 9104 "
  ## SOCKS_PORT_GPG
  INTERNAL_OPEN_PORTS+=" 9105 "
  ## SOCKS_PORT_SSH
  INTERNAL_OPEN_PORTS+=" 9106 "
  ## SOCKS_PORT_GIT
  INTERNAL_OPEN_PORTS+=" 9107 "
  ## SOCKS_PORT_SDWDATE
  INTERNAL_OPEN_PORTS+=" 9108 "
  ## SOCKS_PORT_WGET
  INTERNAL_OPEN_PORTS+=" 9109 "
  ## SOCKS_PORT_SYSTEMCHECK
  INTERNAL_OPEN_PORTS+=" 9110 "
  ## SOCKS_PORT_BITCOIN
  INTERNAL_OPEN_PORTS+=" 9111 "
  ## 9112
  ## 9113
  ## SOCKS_PORT_WHONIX_NEWS
  INTERNAL_OPEN_PORTS+=" 9114 "
  ## SOCKS_PORT_TBB_DOWNLOAD
  INTERNAL_OPEN_PORTS+=" 9115 "
  ## 9116
  ## SOCKS_PORT_CURL
  INTERNAL_OPEN_PORTS+=" 9117 "
  ## SOCKS_PORT_RSS
  INTERNAL_OPEN_PORTS+=" 9118 "
  ## 9119
  ## 9120
  ## 9121
  ## SOCKS_PORT_KDE
  INTERNAL_OPEN_PORTS+=" 9122 "
  ## SOCKS_PORT_GNOME
  INTERNAL_OPEN_PORTS+=" 9123 "
  ## SOCKS_PORT_APTITUDE
  INTERNAL_OPEN_PORTS+=" 9124 "
  ## SOCKS_PORT_YUM
  INTERNAL_OPEN_PORTS+=" 9125 "
  ## SOCKS_PORT_TBB_DEFAULT
  INTERNAL_OPEN_PORTS+=" 9150 "
}

nft_defaults() {
  ## Set secure defaults.
  #$iptables_cmd -P INPUT DROP
  $nftables_cmd add rule filter input counter drop

  ## FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
  #$iptables_cmd -P FORWARD DROP
  $nftables_cmd add rule filter forward counter drop

  ## Will be lifted below.
  #$iptables_cmd -P OUTPUT DROP
  $nftables_cmd add rule filter output counter drop
}

nft_preparation() {
  ## Flush old rules.
  #$iptables_cmd -F
  #$iptables_cmd -X
  #$iptables_cmd -t nat -F
  #$iptables_cmd -t nat -X
  #$iptables_cmd -t mangle -F
  #$iptables_cmd -t mangle -X
  $nftables_cmd flush ruleset
}

nft_drop_invalid_incoming_packages() {
  ## DROP INVALID
  #$iptables_cmd -A INPUT -m conntrack --ctstate INVALID -j DROP
  $nftables_cmd add rule ip filter INPUT ct state invalid counter drop
  #$iptables_cmd -A INPUT -m state --state INVALID -j DROP
  $nftables_cmd add rule ip filter INPUT ct state invalid  counter drop

  ## DROP INVALID SYN PACKETS
  #$iptables_cmd -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
  $nftables_cmd add rule ip filter INPUT tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" "fin|syn|rst|ack" counter drop
  #$iptables_cmd -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
  $nftables_cmd add rule ip filter INPUT tcp flags "&" "(fin|syn)" == "fin|syn" counter drop
  #$iptables_cmd -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $nftables_cmd add rule ip filter INPUT tcp flags "&" "(syn|rst)" == "syn|rst" counter drop

  ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
  #$iptables_cmd -A INPUT -f -j DROP
  $nftables_cmd add rule ip filter INPUT ip frag-off "&" 0x1fff != 0 counter drop

  ## DROP INCOMING MALFORMED XMAS PACKETS
  #$iptables_cmd -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
  $nftables_cmd add rule ip filter INPUT tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" "fin|syn|rst|psh|ack|urg" counter drop

  ## DROP INCOMING MALFORMED NULL PACKETS
  #$iptables_cmd -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
  $nftables_cmd add rule ip filter INPUT tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" 0x0 counter drop
}

qubes() {
  ## Not yet required. Just so Whonix-Workstation firewall can be more similar
  ## to Whonix-Gateway firewall.
  true
}

qubes_dns() {
  local counter
  counter=0

  ## Using '2>/dev/null' because 'qubesdb-read' DNS would fail in Qubes R4
  ## TemplateVMs, because these are non-networked by default.

  if qubes_primary_dns="$(qubesdb-read /qubes-primary-dns 2> /dev/null)"; then
    #$iptables_cmd -A OUTPUT -p udp --dport 53 --dst "$qubes_primary_dns" -j ACCEPT
    $nftables_cmd add rule ip filter OUTPUT ip daddr "$qubes_primary_dns" udp dport 53 counter accept
    counter=$((counter + 1))
  fi

  if qubes_secondary_dns="$(qubesdb-read /qubes-secondary-dns 2> /dev/null)"; then
    #$iptables_cmd -A OUTPUT -p udp --dport 53 --dst "$qubes_secondary_dns" -j ACCEPT
    $nftables_cmd add rule ip filter OUTPUT ip daddr "$qubes_secondary_dns" udp dport 53 counter accept
    counter=$((counter + 1))
  fi

  if [ "$counter" -ge "2" ]; then
    output_cmd "OK: Qubes DNS firewall rules ok."
  else
    #$iptables_cmd -A OUTPUT -p udp --dport 53 -j ACCEPT
    $nftables_cmd add rule ip filter OUTPUT udp dport 53 counter accept
  fi
}

nft_input_rules() {
  ## Traffic on the loopback interface is accepted.
  #$iptables_cmd -A INPUT -i lo -j ACCEPT
  $nftables_cmd add rule ip filter INPUT iifname "lo" counter accept

  ## Established incoming connections are accepted.
  #$iptables_cmd -A INPUT -m state --state ESTABLISHED -j ACCEPT
  $nftables_cmd add rule ip filter INPUT ct state established  counter accept

  ## Allow all incoming connections on the virtual VPN network interface,
  ## when TUNNEL_FIREWALL_ENABLE mode is enabled.
  ## DISABLED BY DEFAULT.
  if [ "$TUNNEL_FIREWALL_ENABLE" = "true" ]; then
    #$iptables_cmd -A INPUT -i "$VPN_INTERFACE" -j ACCEPT
    $nftables_cmd add rule ip filter INPUT iifname "$VPN_INTERFACE" counter accept
  fi

  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    true "firewall_mode is $firewall_mode, therefore not opening EXTERNAL_OPEN_PORTS."
  else
    local local_port_to_open
    if [ "${info_enabled}" = "1" ]; then
      output_cmd "INFO: Opening External TCP port(s): ${EXTERNAL_OPEN_PORTS:-"NONE"}"
    fi
    for local_port_to_open in $EXTERNAL_OPEN_PORTS; do
      #$iptables_cmd -A INPUT -p tcp --dport "$local_port_to_open" -j ACCEPT
      $nftables_cmd add rule ip filter INPUT tcp dport "$local_port_to_open" counter accept
    done

    local local_udp_port_to_open
    if [ "${info_enabled}" = "1" ]; then
      output_cmd "INFO: Opening External UDP port(s): ${EXTERNAL_UDP_OPEN_PORTS:-"NONE"}"
    fi
    for local_udp_port_to_open in $EXTERNAL_UDP_OPEN_PORTS; do
      #$iptables_cmd -A INPUT -p udp --dport "$local_udp_port_to_open" -j ACCEPT
      $nftables_cmd add rule ip filter INPUT udp dport "$local_udp_port_to_open" counter accept
    done

    if [ "$EXTERNAL_OPEN_ALL" = "true" ]; then
      [ "${info_enabled}" = "1" ] && output_cmd "INFO: EXTERNAL_OPEN_ALL='true', all external ports will be opened"
      #$iptables_cmd -A INPUT -j ACCEPT
      $nftables_cmd add rule ip filter INPUT counter accept
    fi
  fi
}

nft_input_defaults() {
  ## Log.
  ##$iptables_cmd -A INPUT -j LOG --log-prefix "Whonix_blocked_input4: "
  #$nftables_cmd add rule ip filter INPUT counter log prefix \"Whonix_blocked_input4:\"

  ## Required for Control Port Filter Proxy Connection.
  ## https://phabricator.whonix.org/T112
  #$iptables_cmd -A INPUT -p tcp -j REJECT --reject-with tcp-reset
  $nftables_cmd add rule ip filter INPUT ip protocol tcp counter reject with tcp reset

  ## Reject anything not explicitly allowed above.
  #$iptables_cmd -A INPUT -j REJECT --reject-with icmp-port-unreachable
  $nftables_cmd add rule ip filter INPUT counter reject
}

nft_forward() {
  ## Log.
  ##$iptables_cmd -A FORWARD -j LOG --log-prefix "Whonix_blocked_forward4: "
  #$nftables_cmd add rule ip filter FORWARD counter log prefix \"Whonix_blocked_forward4:\"

  #$iptables_cmd -A FORWARD -j DROP
  $nftables_cmd add rule ip filter FORWARD counter drop
}

nft_reject_invalid_outgoing_packages() {
  ## Drop invalid outgoing packages,
  ## unless NO_REJECT_INVALID_OUTGOING_PACKAGES is set to 1.
  if [ ! "$NO_REJECT_INVALID_OUTGOING_PACKAGES" = "1" ]; then
    ## https://lists.torproject.org/pipermail/tor-talk/2014-March/032507.html
    #$iptables_cmd -A OUTPUT -m conntrack --ctstate INVALID -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT ct state invalid counter reject with icmp type admin-prohibited
    #$iptables_cmd -A OUTPUT -m state --state INVALID -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT ct state invalid  counter reject with icmp type admin-prohibited
    ##$iptables_cmd -A OUTPUT ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,FIN ACK,FIN -j REJECT --reject-with icmp-admin-prohibited
    #$nftables_cmd add rule ip filter OUTPUT oifname != "lo" ip saddr != 127.0.0.1 ip daddr != 127.0.0.1 tcp flags "&" "(fin|ack)" == "fin|ack" counter reject with icmp type admin-prohibited
    ##$iptables_cmd -A OUTPUT ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,RST ACK,RST -j REJECT --reject-with icmp-admin-prohibited
    #$nftables_cmd add rule ip filter OUTPUT oifname != "lo" ip saddr != 127.0.0.1 ip daddr != 127.0.0.1 tcp flags "&" "(rst|ack)" == "rst|ack" counter reject with icmp type admin-prohibited

    ## DROP INVALID SYN PACKETS
    #$iptables_cmd -A OUTPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == "fin|syn|rst|ack" counter reject with icmp type admin-prohibited
    #$iptables_cmd -A OUTPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT tcp flags "&" "(fin|syn)" == "fin|syn" counter reject with icmp type admin-prohibited
    #$iptables_cmd -A OUTPUT -p tcp --tcp-flags SYN,RST SYN,RST -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT tcp flags "&" "(syn|rst)" == "syn|rst" counter reject with icmp type admin-prohibited

    ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
    #$iptables_cmd -A OUTPUT -f -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT ip frag-off "&" 0x1fff != 0 counter reject with icmp type admin-prohibited

    ## DROP INCOMING MALFORMED XMAS PACKETS
    #$iptables_cmd -A OUTPUT -p tcp --tcp-flags ALL ALL -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == "fin|syn|rst|psh|ack|urg" counter reject with icmp type admin-prohibited

    ## DROP INCOMING MALFORMED NULL PACKETS
    #$iptables_cmd -A OUTPUT -p tcp --tcp-flags ALL NONE -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule ip filter OUTPUT tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == 0x0 counter reject with icmp type admin-prohibited
  fi
}

qubes_updates_proxy() {
  ## Detect Qubes.
  if ! command -v "qubesdb-read" > /dev/null 2>&1; then
    return 0
  fi

  ## Detect being run inside TemplateVM.
  if [ ! -f "/run/qubes/this-is-templatevm" ]; then
    return 0
  fi

  ## Detect if torified Qubes updates proxy was detected.
  if test -f "/run/updatesproxycheck/whonix-secure-proxy"; then
    output_cmd "OK: Torified Qubes Updates Proxy check ok. Full access to Qubes Updates Proxy."
    return 0
  fi

  output_cmd "OK: Torified Qubes Updates Proxy check not done yet. Limiting access to Qubes Updates Proxy to user 'updatesproxycheck'."

  #$iptables_cmd -A OUTPUT -m owner --uid-owner "$UPDATESPROXYCHECK_USER" -m iprange --dst-range "127.0.0.1" -p tcp --dport "$qubes_updates_proxy_port" -j ACCEPT
  $nftables_cmd add rule ip filter OUTPUT skuid "$UPDATESPROXYCHECK_USER" ip daddr 127.0.0.1-127.0.0.1 tcp dport "$qubes_updates_proxy_port" counter accept
  #$iptables_cmd -A OUTPUT -m owner --uid-owner "$UPDATESPROXYCHECK_USER" -m iprange --dst-range "10.137.255.254" -p tcp --dport "$qubes_updates_proxy_port" -j ACCEPT
  $nftables_cmd add rule ip filter OUTPUT skuid "$UPDATESPROXYCHECK_USER" ip daddr 10.137.255.254-10.137.255.254 tcp dport "$qubes_updates_proxy_port" counter accept

  #$iptables_cmd -A OUTPUT -m iprange --dst-range "127.0.0.1" -p tcp --dport "$qubes_updates_proxy_port" -j REJECT --reject-with icmp-admin-prohibited
  $nftables_cmd add rule ip filter OUTPUT ip daddr 127.0.0.1-127.0.0.1 tcp dport "$qubes_updates_proxy_port" counter reject with icmp type admin-prohibited
  #$iptables_cmd -A OUTPUT -m iprange --dst-range "10.137.255.254" -p tcp --dport "$qubes_updates_proxy_port" -j REJECT --reject-with icmp-admin-prohibited
  $nftables_cmd add rule ip filter OUTPUT ip daddr 10.137.255.254-10.137.255.254 tcp dport "$qubes_updates_proxy_port" counter reject with icmp type admin-prohibited
}

nft_output() {
  ## Prevent connections to Tor SocksPorts.
  ## https://phabricator.whonix.org/T533#11025
  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    local socks_port_item
    output_cmd "INFO: not opening Internal TCP ports ${INTERNAL_OPEN_PORTS}, except 9108 for sdwdate, because firewall_mode=$firewall_mode"
    for socks_port_item in $INTERNAL_OPEN_PORTS; do
      true "socks_port_item: $socks_port_item"
      ## SOCKS_PORT_SDWDATE
      if [ "$socks_port_item" = "9108" ]; then
        ## Permit connections to SOCKS_PORT_SDWDATE 9108 even in
        ## 'timesync-fail-closed' mode. Otherwise, sdwdate could never
        ## succeed and firewall_mode could never change to 'full'.
        continue
      fi
      #$iptables_cmd -A OUTPUT -p tcp --dport "$socks_port_item" --dst "127.0.0.1" -j REJECT
      $nftables_cmd add rule ip filter OUTPUT ip daddr 127.0.0.1 tcp dport "$socks_port_item" counter reject
    done
  fi

  qubes_updates_proxy

  ## Access to localhost is required even in timesync-fail-closed mode,
  ## otherwise breaks applications such as konsole and kwrite.
  #$iptables_cmd -A OUTPUT -o lo -j ACCEPT
  $nftables_cmd add rule ip filter OUTPUT oifname "lo" counter accept

  ## Allow outgoing traffic on VPN interface,
  ## if TUNNEL_FIREWALL_ENABLE mode is enabled.
  ## DISABLED BY DEFAULT.
  if [ "$TUNNEL_FIREWALL_ENABLE" = "true" ]; then
    if [ "$firewall_mode" = "timesync-fail-closed" ]; then
      true "firewall_mode is $firewall_mode, therefore prohibiting user $TUNNEL_USER traffic."
    else
      true "firewall_mode is $firewall_mode, therefore allowing user $TUNNEL_USER traffic."
      ## Connections to VPN servers are allowed,
      #$iptables_cmd -A OUTPUT -o "$VPN_INTERFACE" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT oifname "$VPN_INTERFACE" counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$TUNNEL_USER" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$TUNNEL_USER" counter accept
    fi

    if [ "$TUNNEL_FIREWALL_ALLOW_SDWDATE_USER" = "true" ]; then
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SDWDATE_USER" ip daddr 127.0.0.1-127.0.0.1 counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SDWDATE_USER" ip daddr "$GATEWAY_IP" counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SDWDATE_USER" ip daddr "$GATEWAY_IP_HARDCODED" counter accept
    fi

    if [ "$TUNNEL_FIREWALL_ALLOW_NOTUNNEL_USER" = "true" ]; then
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$NOTUNNEL_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$NOTUNNEL_USER" ip daddr 127.0.0.1-127.0.0.1 counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$NOTUNNEL_USER" -m iprange --dst-range "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$NOTUNNEL_USER" ip daddr "$GATEWAY_IP"  counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$NOTUNNEL_USER" -m iprange --dst-range "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$NOTUNNEL_USER" ip daddr "$GATEWAY_IP_HARDCODED" counter accept
    fi

    ## Accept outgoing connections to local network.
    if [ "$TUNNEL_FIREWALL_ALLOW_LOCAL_NET" = "true" ]; then
      if [ "$firewall_mode" = "timesync-fail-closed" ]; then
        true
      else
        local local_net_item
        for local_net_item in $LOCAL_NET; do
          #$iptables_cmd -A OUTPUT -m iprange --dst-range "$local_net_item" -j ACCEPT
          $nftables_cmd add rule ip filter OUTPUT ip daddr "$local_net_item" counter accept
        done
      fi
    fi

    if [ "$TUNNEL_FIREWALL_ALLOW_CONTROL_PORT_FILTER_PROXY" = "true" ]; then
      #$iptables_cmd -A OUTPUT -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "127.0.0.1" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr 127.0.0.1 tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT"  counter accept
      #$iptables_cmd -A OUTPUT -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP" tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT"  counter accept
      #$iptables_cmd -A OUTPUT -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP_HARDCODED" tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT"  counter accept
    fi

    if [ "$TUNNEL_FIREWALL_ALLOW_TB_UPDATER" = "true" ]; then
      if [ "$firewall_mode" = "timesync-fail-closed" ]; then
        true
      else
        ## SOCKS_PORT_TBB_DOWNLOAD
        #$iptables_cmd -A OUTPUT -p tcp --dport "9115" --dst "$GATEWAY_IP" -j ACCEPT
        $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP" tcp dport 9115 counter accept
        #$iptables_cmd -A OUTPUT -p tcp --dport "9115" --dst "$GATEWAY_IP_HARDCODED" -j ACCEPT
        $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP_HARDCODED" tcp dport 9115 counter accept
      fi
    fi

    if [ "$TUNNEL_FIREWALL_ALLOW_SYSTEMCHECK" = "true" ]; then
      if [ "$firewall_mode" = "timesync-fail-closed" ]; then
        true
      else
        #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
        $nftables_cmd add rule ip filter OUTPUT skuid "$SYSTEMCHECK_USER" ip daddr 127.0.0.1-127.0.0.1 counter accept
        #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "$GATEWAY_IP" -j ACCEPT
        $nftables_cmd add rule ip filter OUTPUT skuid "$SYSTEMCHECK_USER" ip daddr "$GATEWAY_IP" counter accept
        #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "$GATEWAY_IP_HARDCODED" -j ACCEPT
        $nftables_cmd add rule ip filter OUTPUT skuid "$SYSTEMCHECK_USER" ip daddr "$GATEWAY_IP_HARDCODED" counter accept
      fi
    fi
  else
    if [ "$firewall_mode" = "timesync-fail-closed" ]; then
      true "firewall_mode is $firewall_mode, therefore prohibiting DNS traffic."
    else
      true "firewall_mode is $firewall_mode, therefore allowing DNS traffic."
      ## Allow Whonix-Workstation to query Whonix-Gateway for DNS.
      #$iptables_cmd -A OUTPUT -p udp --dport 53 --dst "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP" udp dport 53 counter accept
      #$iptables_cmd -A OUTPUT -p udp --dport 53 --dst "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP_HARDCODED" udp dport 53 counter accept
      if command -v "qubesdb-read" > /dev/null 2>&1; then
        qubes_dns
      fi
    fi

    ## Not sure about the next one. UDP is not supported by Tor, why not
    ## block any outgoing UDP. Might have unwanted side effects when tunneling
    ## UDP over Tor.
    ## https://www.whonix.org/wiki/Tunnel_UDP_over_Tor
    ##
    ## All other non-TCP protocol traffic gets rejected.
    ## iptables knows 7 different protocols and all.
    ## (tcp, udp, udplite, icmp, esp, ah, sctp or all)
    ##
    ## IP HARDCODED but no need to change since comment only.
    ##
    ## (1) ping torproject.org
    ##     4 packets transmitted, 0 received, 100% packet loss, time 3000ms
    ##
    ## (2) ping torproject.org
    ##     From 10.152.152.11 icmp_seq=1 Destination Port Unreachable
    ##     0 packets transmitted, 0 received, +100 errors
    ##
    ## The next rule ensures, that only tcp can leave and achieves the desired result from (2).
    if [ "$firewall_allow_udp" = "true" ]; then
      true "Allowing UDP."
    else
      #$iptables_cmd -A OUTPUT ! -p tcp -j REJECT --reject-with icmp-port-unreachable
      $nftables_cmd add rule ip filter OUTPUT ip protocol != tcp counter reject
    fi

    if [ "$firewall_mode" = "timesync-fail-closed" ]; then
      true "firewall_mode is $firewall_mode, therefore prohibiting all outgoing traffic."

      ## Allow sdwdate talking to localhost and Tor in Whonix firewall timesync-fail-closed mode.
      ## Otherwise in Whonix firewall full mode this rule is redundant.
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SDWDATE_USER" ip daddr 127.0.0.1-127.0.0.1 counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SDWDATE_USER" ip daddr "$GATEWAY_IP" counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SDWDATE_USER" ip daddr "$GATEWAY_IP_HARDCODED" counter accept

      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SYSTEMCHECK_USER" ip daddr 127.0.0.1-127.0.0.1 counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SYSTEMCHECK_USER" ip daddr "$GATEWAY_IP" counter accept
      #$iptables_cmd -A OUTPUT -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT skuid "$SYSTEMCHECK_USER" ip daddr "$GATEWAY_IP_HARDCODED" counter accept

      #$iptables_cmd -A OUTPUT -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "127.0.0.1" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr 127.0.0.1 tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT" counter accept
      #$iptables_cmd -A OUTPUT -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "$GATEWAY_IP" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP" tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT" counter accept
      #$iptables_cmd -A OUTPUT -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "$GATEWAY_IP_HARDCODED" -j ACCEPT
      $nftables_cmd add rule ip filter OUTPUT ip daddr "$GATEWAY_IP_HARDCODED" tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT" counter accept
    else
      if [ "$outgoing_allow_ip_list" = "" ]; then
        true "firewall_mode is $firewall_mode and outgoing_allow_ip_list is empty, therefore allowing all outgoing traffic."
        #$iptables_cmd -A OUTPUT -j ACCEPT
        $nftables_cmd add rule ip filter OUTPUT counter accept
      else
        for outgoing_allow_ip_item in $outgoing_allow_ip_list; do
          true "firewall_mode is $firewall_mode and outgoing_allow_ip_list is set, allowing IP: $outgoing_allow_ip_list"
          #$iptables_cmd -A OUTPUT -p tcp --dst "$outgoing_allow_ip_item" -j ACCEPT
          $nftables_cmd add rule ip filter OUTPUT ip protocol tcp ip daddr "$outgoing_allow_ip_item" counter accept
        done
      fi
    fi

    ## Log.
    ##$iptables_cmd -A OUTPUT -j LOG --log-prefix "Whonix_blocked_output4: "
    #$nftables_cmd add rule ip filter OUTPUT counter log prefix \"Whonix_blocked_output4:\"

    ## Reject all other outgoing traffic.
    #$iptables_cmd -A OUTPUT -j REJECT --reject-with icmp-port-unreachable
    $nftables_cmd add rule ip filter OUTPUT counter reject
  fi
}

status_files() {
  mkdir --parents /run/whonix_firewall
  if [ -e /run/whonix_firewall/first_run_current_boot.status ]; then
    touch /run/whonix_firewall/consecutive_run.status
    return 0
  fi
  touch /run/whonix_firewall/first_run_current_boot.status
}

date_cmd() {
  date -u +"%Y-%m-%d %T"
}

output_cmd() {
  echo "$(date_cmd) - $0 - $@"
}

firewall_mode_detection() {
  if [ ! "$firewall_mode" = "" ]; then
    output_cmd "OK: Skipping firewall mode detection since already set to '$firewall_mode'."
    if [ "$firewall_mode" = "timesync-fail-closed" ]; then
      output_cmd "OK: (Only local Tor control port connections and torified sdwdate allowed.)"
      return 0
    elif [ "$firewall_mode" = "full" ]; then
      output_cmd "OK: (Full torified network access allowed.)"
      return 0
    else
      output_cmd "ERROR: firewall_mode must be set to either 'full' or 'timesync-fail-closed'."
      error_handler
    fi
  fi

  ## Run Whonix firewall in full mode if sdwdate already succeeded.
  if [ -e /run/sdwdate/first_success ]; then
    firewall_mode=full
    output_cmd "OK: (/run/sdwdate/first_success exists.)"
  elif [ -e /run/sdwdate/success ]; then
    firewall_mode=full
    output_cmd "OK: (/run/sdwdate/success exists.)"
  ## /run/whonix_firewall/first_run_current_boot.status already exists,
  ## therefore have Whonix firewall run in full mode.
  elif [ -e /run/whonix_firewall/first_run_current_boot.status ]; then
    firewall_mode=full
    output_cmd "OK: (/run/whonix_firewall/first_run_current_boot.status exists.)"
  else
    ## /run/whonix_firewall/first_run_current_boot.status does not yet exist,
    ## therefore return 'yes, timesync-fail-closed'.
    firewall_mode=timesync-fail-closed
  fi

  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    output_cmd "OK: First run during current boot, therefore running in timesync-fail-closed mode."
    output_cmd "OK: (Only local Tor control port connections and torified sdwdate allowed.)"
  else
    output_cmd "OK: Consecutive run during current boot, therefore running in full mode."
    output_cmd "OK: (Full torified network access allowed.)"
  fi
}

end() {
  output_cmd "OK: Whonix firewall loaded."

  exit 0
}

main() {
  init
  variables_defaults
  source_config_folder
  firewall_mode_detection
  nft_defaults
  nft_preparation
  nft_drop_invalid_incoming_packages
  qubes
  nft_input_rules
  nft_input_defaults
  nft_forward
  nft_reject_invalid_outgoing_packages
  nft_output
  status_files
  end
}

usage() {
  echo "usage: ${0##*/} [options]
    -i, --info           print informational messages
    -h, --help           print this help message"
}

while true; do
  case $1 in
      -s | --source)
      source_only=1
      shift 1
      ;;
    -i | --info)
      info_enabled=1
      shift 1
      ;;
    "") break ;;
    -h | --help | *)
      usage
      exit 1
      ;;
  esac
done

if [ "$source_only" = "1" ]; then
   return 0
fi

main
